/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timetablemanagement;


import java.sql.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Thiline Tissera
 */
public class SpecialSession extends javax.swing.JInternalFrame {

    /**
     * Creates new form SpecialSession
     */
    public SpecialSession() {
        initComponents();
        viewDetails_con();
        viewDetails_para();
        viewDetails_non();
        
        TimeValidate();
        Details();
        
        this.setBorder(null);
        BasicInternalFrameUI bui = (BasicInternalFrameUI)this.getUI();
        bui.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        Session_tab = new javax.swing.JTabbedPane();
        consecutive_tab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_cons = new javax.swing.JTable();
        btn_cons_view = new javax.swing.JButton();
        btn_cons_Add = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        parallel_tab = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btn_para_view = new javax.swing.JButton();
        btn_para_Add = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Table_para = new javax.swing.JTable();
        nonOverLap_tab = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        btn_nonOver_view = new javax.swing.JButton();
        btn_nonOver_Add = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        Table_nonover = new javax.swing.JTable();
        NotAvailable_tab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SsIDCB = new javax.swing.JComboBox<>();
        SubGrpCB = new javax.swing.JComboBox<>();
        GrpCB = new javax.swing.JComboBox<>();
        LecCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        StimeCb = new javax.swing.JComboBox<>();
        EtimeCb = new javax.swing.JComboBox<>();
        DateCB = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        btn_notAvailable_Add = new javax.swing.JButton();
        btn_notAvailable_view = new javax.swing.JButton();
        btn_notAvailable_clear = new javax.swing.JButton();

        jLabel11.setBackground(new java.awt.Color(204, 204, 204));
        jLabel11.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Sessions and  Unavailable Time Allocation");

        Table_cons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Subject Code", "Subject", "Group ID", "Tag", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table_cons.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(Table_cons);
        Table_cons.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        btn_cons_view.setText("View");
        btn_cons_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cons_viewActionPerformed(evt);
            }
        });

        btn_cons_Add.setText("Select Session");
        btn_cons_Add.setActionCommand("add Session");
        btn_cons_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cons_AddActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Consecutive");

        javax.swing.GroupLayout consecutive_tabLayout = new javax.swing.GroupLayout(consecutive_tab);
        consecutive_tab.setLayout(consecutive_tabLayout);
        consecutive_tabLayout.setHorizontalGroup(
            consecutive_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consecutive_tabLayout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(746, Short.MAX_VALUE))
            .addGroup(consecutive_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addGroup(consecutive_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_cons_view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_cons_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );
        consecutive_tabLayout.setVerticalGroup(
            consecutive_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consecutive_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(consecutive_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(consecutive_tabLayout.createSequentialGroup()
                        .addComponent(btn_cons_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_cons_view, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addGap(39, 39, 39))
        );

        Session_tab.addTab("Consecutive", consecutive_tab);

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Parallel");

        btn_para_view.setText("View");
        btn_para_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_para_viewActionPerformed(evt);
            }
        });

        btn_para_Add.setText("Add Session");
        btn_para_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_para_AddActionPerformed(evt);
            }
        });

        Table_para.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Subject Code", "Subject", "Group ID", "Tag", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(Table_para);
        Table_para.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout parallel_tabLayout = new javax.swing.GroupLayout(parallel_tab);
        parallel_tab.setLayout(parallel_tabLayout);
        parallel_tabLayout.setHorizontalGroup(
            parallel_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parallel_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parallel_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parallel_tabLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(736, Short.MAX_VALUE))
                    .addGroup(parallel_tabLayout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addGap(26, 26, 26)
                        .addGroup(parallel_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_para_view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_para_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28))))
        );
        parallel_tabLayout.setVerticalGroup(
            parallel_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parallel_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(parallel_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parallel_tabLayout.createSequentialGroup()
                        .addComponent(btn_para_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_para_view, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 33, Short.MAX_VALUE))
        );

        Session_tab.addTab("Parallel", parallel_tab);

        jLabel9.setBackground(new java.awt.Color(204, 204, 204));
        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Non Overlapping");

        btn_nonOver_view.setText("View");
        btn_nonOver_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nonOver_viewActionPerformed(evt);
            }
        });

        btn_nonOver_Add.setText("Add Session");
        btn_nonOver_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nonOver_AddActionPerformed(evt);
            }
        });

        Table_nonover.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Subject Code", "Subject", "Group ID", "Tag", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(Table_nonover);
        Table_nonover.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout nonOverLap_tabLayout = new javax.swing.GroupLayout(nonOverLap_tab);
        nonOverLap_tab.setLayout(nonOverLap_tabLayout);
        nonOverLap_tabLayout.setHorizontalGroup(
            nonOverLap_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nonOverLap_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nonOverLap_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nonOverLap_tabLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 600, Short.MAX_VALUE))
                    .addComponent(jScrollPane6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nonOverLap_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_nonOver_view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_nonOver_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
        nonOverLap_tabLayout.setVerticalGroup(
            nonOverLap_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nonOverLap_tabLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(btn_nonOver_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_nonOver_view, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 156, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nonOverLap_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Session_tab.addTab("Non Overlapping", nonOverLap_tab);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Select Lecturer");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Select Group");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Select Sub Group");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Select Session ID");

        SsIDCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        SsIDCB.setPreferredSize(new java.awt.Dimension(60, 25));
        SsIDCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SsIDCBMouseClicked(evt);
            }
        });

        SubGrpCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        SubGrpCB.setPreferredSize(new java.awt.Dimension(60, 25));
        SubGrpCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SubGrpCBMouseClicked(evt);
            }
        });
        SubGrpCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubGrpCBActionPerformed(evt);
            }
        });

        GrpCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        GrpCB.setPreferredSize(new java.awt.Dimension(60, 25));
        GrpCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GrpCBMouseClicked(evt);
            }
        });
        GrpCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrpCBActionPerformed(evt);
            }
        });

        LecCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        LecCB.setName("SessionID"); // NOI18N
        LecCB.setPreferredSize(new java.awt.Dimension(60, 25));
        LecCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LecCBMouseClicked(evt);
            }
        });
        LecCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LecCBActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Date");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Time(24hr)");

        StimeCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "08.00", "08.30", "09.00", "09.30", "10.00", "10.30", "11.00", "11.30", "12.00", "12.30", "13.00", "13.30", "14.00", "14.30", "15.00", "15.30", "16.00", "16.30", "17.00", "17.30", " " }));
        StimeCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StimeCbActionPerformed(evt);
            }
        });

        DateCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", " " }));
        DateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateCBActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("To");

        btn_notAvailable_Add.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_notAvailable_Add.setText("Submit");
        btn_notAvailable_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_notAvailable_AddActionPerformed(evt);
            }
        });

        btn_notAvailable_view.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_notAvailable_view.setText("View");
        btn_notAvailable_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_notAvailable_viewActionPerformed(evt);
            }
        });

        btn_notAvailable_clear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_notAvailable_clear.setText("Clear");
        btn_notAvailable_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_notAvailable_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NotAvailable_tabLayout = new javax.swing.GroupLayout(NotAvailable_tab);
        NotAvailable_tab.setLayout(NotAvailable_tabLayout);
        NotAvailable_tabLayout.setHorizontalGroup(
            NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SubGrpCB, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SsIDCB, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GrpCB, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LecCB, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                                .addComponent(DateCB, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))
                            .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                                .addComponent(StimeCb, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(EtimeCb, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                            .addComponent(btn_notAvailable_view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_notAvailable_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btn_notAvailable_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(163, 163, 163))
        );
        NotAvailable_tabLayout.setVerticalGroup(
            NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LecCB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GrpCB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SubGrpCB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SsIDCB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(NotAvailable_tabLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StimeCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EtimeCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_notAvailable_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotAvailable_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_notAvailable_view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_notAvailable_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(57, 57, 57))
        );

        Session_tab.addTab("Unavailable Times", NotAvailable_tab);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(Session_tab, javax.swing.GroupLayout.PREFERRED_SIZE, 1055, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Session_tab, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cons_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cons_AddActionPerformed

     String btn_txt = btn_cons_Add.getText();
     String type = "";
     
     if("Select Session".equalsIgnoreCase(btn_txt)){
         List <Integer> removerow = new ArrayList<>();
        for(int i = 0; i < Table_cons.getRowCount();i++){
        Boolean a;
        try{

            a=Boolean.valueOf((Table_cons.getValueAt(i, 7)).toString());
            System.out.println("true :"+i);
            
        }catch(Exception e){
            a=false;
            System.out.println("false :"+i);
        }

            if(a!=true){
                removerow.add(i);
            }

        }
        if(removerow.size()==Table_cons.getRowCount()){
             JOptionPane.showMessageDialog(null, "Atleats  Select a Raw");
        }else{
            int re=0;
            for(Integer row : removerow){
                ((DefaultTableModel)Table_cons.getModel()).removeRow(row-re);
                re++;
            }
            Table_cons.removeColumn(Table_cons.getColumnModel().getColumn(7));
            btn_cons_Add.setText("Add Session");
        }
        
        
     }
     else
     {
          try
            {
                
                Connection con =DataBase.getConnection();
                Statement statement = con.createStatement();
                String sql="INSERT INTO session_type (`type`) VALUES ('con')";
                int lastid = statement.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);
                ResultSet rs= statement.getGeneratedKeys();
                if (rs.next()) 
                {
                   lastid=rs.getInt(1);
                   for(int i = 0; i < Table_cons.getRowCount();i++){
                       sql="INSERT INTO join_session_type (`st_id`,`s_id`) VALUES ('"+lastid+"','"+(Table_cons.getValueAt(i, 0)).toString()+"')";
                       DataBase.setData(sql);
                       
                    
                   }
                   JOptionPane.showMessageDialog(null, "Details Successfully Added");
                } else{
                    System.out.println("non");
                }
                
           
            }
            catch (Exception e)
            {
                e.printStackTrace();
               JOptionPane.showMessageDialog(null, "Failed" + e);
            }
                
    }             
  
    
    }//GEN-LAST:event_btn_cons_AddActionPerformed

    private void btn_cons_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cons_viewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cons_viewActionPerformed

    private void btn_para_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_para_AddActionPerformed
     String btn_txt = btn_para_Add.getText();
     String id = "", type = "";
     
     if("Select Session".equalsIgnoreCase(btn_txt)){
         List <Integer> removerow = new ArrayList<>();
        for(int i = 0; i < Table_para.getRowCount();i++){
        Boolean a;
        try{

            a=Boolean.valueOf((Table_para.getValueAt(i, 7)).toString());
           
            
        }catch(Exception e){
            a=false;
            System.out.println("false :"+i);
        }

            if(a!=true){
                removerow.add(i);
            }

        }
        if(removerow.size()==Table_para.getRowCount()){
             JOptionPane.showMessageDialog(null, "Atleats  Select a Raw");
        }else{
            int re=0;
            for(Integer row : removerow){
                ((DefaultTableModel)Table_para.getModel()).removeRow(row-re);
                re++;
            }
            Table_para.removeColumn(Table_para.getColumnModel().getColumn(7));
            btn_para_Add.setText("Add Session");
        }
        
        
     }
     else
     {
          try
            {
                
                Connection con =DataBase.getConnection();
                Statement statement = con.createStatement();
                String sql="INSERT INTO session_type (`type`) VALUES ('para')";
                int lastid = statement.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);
                ResultSet rs= statement.getGeneratedKeys();
                if (rs.next()) 
                {
                   lastid=rs.getInt(1);
                   for(int i = 0; i < Table_para.getRowCount();i++){
                       sql="INSERT INTO join_session_type (`st_id`,`s_id`) VALUES ('"+lastid+"','"+(Table_para.getValueAt(i, 0)).toString()+"')";
                       DataBase.setData(sql);
                       
                    
                   }
                   JOptionPane.showMessageDialog(null, "Details Successfully Added");
                } else{
                    System.out.println("non");
                }
                
           
            }
            catch (Exception e)
            {
                e.printStackTrace();
               JOptionPane.showMessageDialog(null, "Failed" + e);
            }
     }
    }//GEN-LAST:event_btn_para_AddActionPerformed

    private void btn_para_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_para_viewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_para_viewActionPerformed

    private void btn_nonOver_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nonOver_AddActionPerformed
        String btn_txt = btn_nonOver_Add.getText();
     String id = "", type = "";
     
     if("Select Session".equalsIgnoreCase(btn_txt)){
         List <Integer> removerow = new ArrayList<>();
        for(int i = 0; i < Table_nonover.getRowCount();i++){
        Boolean a;
        try{

            a=Boolean.valueOf((Table_nonover.getValueAt(i, 7)).toString());
           
            
        }catch(Exception e){
            a=false;
            System.out.println("false :"+i);
        }

            if(a!=true){
                removerow.add(i);
            }

        }
        if(removerow.size()==Table_nonover.getRowCount()){
             JOptionPane.showMessageDialog(null, "Atleats  Select a Raw");
        }else{
            int re=0;
            for(Integer row : removerow){
                ((DefaultTableModel)Table_nonover.getModel()).removeRow(row-re);
                re++;
            }
            Table_nonover.removeColumn(Table_nonover.getColumnModel().getColumn(7));
            btn_nonOver_Add.setText("Add Session");
        }
        
        
     }
     else
     {
          try
            {
                
                Connection con =DataBase.getConnection();
                Statement statement = con.createStatement();
                String sql="INSERT INTO session_type (`type`) VALUES ('nonpar')";
                int lastid = statement.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);
                ResultSet rs= statement.getGeneratedKeys();
                if (rs.next()) 
                {
                   lastid=rs.getInt(1);
                   for(int i = 0; i < Table_nonover.getRowCount();i++){
                       sql="INSERT INTO join_session_type (`st_id`,`s_id`) VALUES ('"+lastid+"','"+(Table_nonover.getValueAt(i, 0)).toString()+"')";
                       DataBase.setData(sql);
                       
                    
                   }
                   JOptionPane.showMessageDialog(null, "Details Successfully Added");
                } else{
                    System.out.println("non");
                }
                
           
            }
            catch (Exception e)
            {
                e.printStackTrace();
               JOptionPane.showMessageDialog(null, "Failed" + e);
            }
     }
    }//GEN-LAST:event_btn_nonOver_AddActionPerformed

    private void btn_nonOver_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nonOver_viewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_nonOver_viewActionPerformed

    private void SsIDCBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SsIDCBMouseClicked
//        try
//        {
//
//            ResultSet rs = DataBase.getData("SELECT * FROM session ");
//            while (rs.next())
//            {
//                String ssID = rs.getString("SessionID");
//                SsIDCB.addItem(ssID);
//
//            }
//
//        }
//        catch (Exception e)
//        {
//
//            JOptionPane.showMessageDialog(null, e);
//        }
    }//GEN-LAST:event_SsIDCBMouseClicked

    private void SubGrpCBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubGrpCBMouseClicked
//         try
//        {
//           
//           String gp=GrpCB.getSelectedItem().toString();
//          //  ResultSet rs = DataBase.getData("SELECT `subGrpID` FROM `student` WHERE  GrpID = '"+gp+"'");
//            ResultSet rs = DataBase.getData("SELECT DISTINCT subGrpID FROM student WHERE  GrpID = '"+gp+"'");
//            while (rs.next())
//            {
//                String sgID = rs.getString("subGrpID");
//                SubGrpCB.addItem(sgID);
//
//            }
//
//        }
//        catch (Exception e)
//        {
//
//            JOptionPane.showMessageDialog(null, e);
//        }
    }//GEN-LAST:event_SubGrpCBMouseClicked

    private void GrpCBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrpCBMouseClicked
//        try
//        {
//
//            ResultSet rs = DataBase.getData("SELECT * FROM student ");
//            while (rs.next())
//            {
//                String gID = rs.getString("GrpID");
//                GrpCB.addItem(gID);
//
//            }
//
//        }
//        catch (Exception e)
//        {
//
//            JOptionPane.showMessageDialog(null, e);
//        }
    }//GEN-LAST:event_GrpCBMouseClicked

    private void GrpCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrpCBActionPerformed
        SubGrpCB.removeAllItems();
        SubGrpCB.addItem("Select Sub Group");
        try
        {
           
           String gp=GrpCB.getSelectedItem().toString();
          //  ResultSet rs = DataBase.getData("SELECT `subGrpID` FROM `student` WHERE  GrpID = '"+gp+"'");
            ResultSet rs = DataBase.getData("SELECT DISTINCT subGrpID FROM student WHERE  GrpID = '"+gp+"'");
            while (rs.next())
            {
                String sgID = rs.getString("subGrpID");
                SubGrpCB.addItem(sgID);

            }

        }
        catch (Exception e)
        {

            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_GrpCBActionPerformed

    private void LecCBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LecCBMouseClicked
//        try
//        {
//            ResultSet rs = DataBase.getData("SELECT * FROM lecturer ");
//            while (rs.next())
//            {
//                String LecName = rs.getString("Lecturer_name");
//                LecCB.addItem(LecName);
//            }
//
//        }
//        catch (Exception e)
//        {
//            JOptionPane.showMessageDialog(null, e);
//        }
    }//GEN-LAST:event_LecCBMouseClicked

    public void Details()
    {
        
         String gp = "";
        try
        {
            ResultSet rs = DataBase.getData("SELECT * FROM lecturer ");
            while (rs.next())
            {
                String LecName = rs.getString("Lecturer_name");
                LecCB.addItem(LecName);
            }

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        //-----------------------------------------------------------------------
        try
        {

            ResultSet rs = DataBase.getData("SELECT DISTINCT GrpID FROM student");
            while (rs.next())
            {
                String gID = rs.getString("GrpID");
                GrpCB.addItem(gID);

            }
            gp=GrpCB.getSelectedItem().toString();
            System.out.println("GP :" +  gp);
        }
        catch (Exception e)
        {

            JOptionPane.showMessageDialog(null, e);
        }
        
        //-----------------------------------------------------------------------
        
          try
        {

            ResultSet rs = DataBase.getData("SELECT * FROM session ");
            while (rs.next())
            {
                String ssID = rs.getString("SessionID");
                SsIDCB.addItem(ssID);

            }
            
        }
        catch (Exception e)
        {

            JOptionPane.showMessageDialog(null, e);
        }
          
        //---------------------------------------------------------------------------  
//         try
//        {
//           
//           // gp=GrpCB.getSelectedItem().toString();
//          //  ResultSet rs = DataBase.getData("SELECT `subGrpID` FROM `student` WHERE  GrpID = '"+gp+"'");
//            ResultSet rs = DataBase.getData("SELECT subGrpID FROM student WHERE  GrpID = '"+gp+"'");
//            while (rs.next())
//            {
//                String sgID = rs.getString("subGrpID");
//                SubGrpCB.addItem(sgID);
//
//            }
//
//        }
//        catch (Exception e)
//        {
//
//            JOptionPane.showMessageDialog(null, e);
//        }
         
        //----------------------------------------------------------------------- 
        
    }
    private void LecCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LecCBActionPerformed

    }//GEN-LAST:event_LecCBActionPerformed

    private void StimeCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StimeCbActionPerformed
        TimeValidate();
    }//GEN-LAST:event_StimeCbActionPerformed

    private void DateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateCBActionPerformed

    private void btn_notAvailable_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_notAvailable_AddActionPerformed

        String lecture ="";
        String group ="";
        String subgroup ="";
        String ssID ="";
        String date ="";
        String tFrom ="";
        String tTo ="";

        lecture = LecCB.getSelectedItem().toString();
        group = GrpCB.getSelectedItem().toString();
        subgroup = SubGrpCB.getSelectedItem().toString();
        ssID = SsIDCB.getSelectedItem().toString();
        date = DateCB.getSelectedItem().toString();
        tFrom = StimeCb.getSelectedItem().toString();
        tTo = EtimeCb.getSelectedItem().toString();

        //Feilds Validation

        if(lecture == "Select")
        {
            JOptionPane.showMessageDialog(null, "Select Lecture");
        }
        else if(group == "Select")
        {
            JOptionPane.showMessageDialog(null, "Select Group");
        }
        else if(subgroup == "Select")
        {
            JOptionPane.showMessageDialog(null, "Select Sub Group");
        }
        else if(ssID == "Select")
        {
            JOptionPane.showMessageDialog(null, "Select Session ID");
        }
        else if(date == "Select")
        {
            JOptionPane.showMessageDialog(null, "Select Date");
        }
        else if(tFrom == "Select")
        {
            JOptionPane.showMessageDialog(null, "Enter Unavailable time");
        }
        else if(tTo == "Select")
        {
            JOptionPane.showMessageDialog(null, "Enter Unavailable time");
        }
        else{
            try
            {
                DataBase.setData("insert into lecun(lecName,lGrp,lsbgrp,lssID,Ldate,lFrom,lTo) values('"+lecture+"','"+group+"','"+subgroup+"','"+ssID+"','"+date+"','"+tFrom+"','"+tTo+"')");
                JOptionPane.showMessageDialog(null, "Details Successfully Added to the System");
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "Failed" + e);
            }
        }

    }//GEN-LAST:event_btn_notAvailable_AddActionPerformed

    private void btn_notAvailable_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_notAvailable_viewActionPerformed
        Session_tab.removeAll();
        LecUnavailable Lun = new LecUnavailable();
        Session_tab.add(Lun).setVisible(true);
        Lun.setSize(Session_tab.getWidth(), Session_tab.getHeight());

    }//GEN-LAST:event_btn_notAvailable_viewActionPerformed

    private void btn_notAvailable_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_notAvailable_clearActionPerformed
        Clear();

    }//GEN-LAST:event_btn_notAvailable_clearActionPerformed

    private void SubGrpCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubGrpCBActionPerformed
       
    }//GEN-LAST:event_SubGrpCBActionPerformed

//----------------------------------------------------H.A.D Ruchira----------------------------------------------------------------
    public void Clear()
    {
        
        LecCB.setSelectedItem("Select");
        GrpCB.setSelectedItem("Select");
        SubGrpCB.setSelectedItem("Select");
        SsIDCB.setSelectedItem("Select");
        DateCB.setSelectedItem("Select");
        StimeCb.setSelectedItem("Select");
       EtimeCb.setSelectedItem("Select");
       
    }
      private void TimeValidate(){  
          
       if(StimeCb.getSelectedItem().equals("08.00")){
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("08.30");
            EtimeCb.addItem("09.00");
            EtimeCb.addItem("09.30");
            EtimeCb.addItem("10.00");
            EtimeCb.addItem("10.30");
            EtimeCb.addItem("11.00");
            EtimeCb.addItem("11.30");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }
       else if(StimeCb.getSelectedItem().equals("08.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("09.00");
            EtimeCb.addItem("09.30");
            EtimeCb.addItem("10.00");
            EtimeCb.addItem("10.30");
            EtimeCb.addItem("11.00");
            EtimeCb.addItem("11.30");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("09.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("09.30");
            EtimeCb.addItem("10.00");
            EtimeCb.addItem("10.30");
            EtimeCb.addItem("11.00");
            EtimeCb.addItem("11.30");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");   
            
         }else if(StimeCb.getSelectedItem().equals("09.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("10.00");
            EtimeCb.addItem("10.30");
            EtimeCb.addItem("11.00");
            EtimeCb.addItem("11.30");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("10.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("10.30");
            EtimeCb.addItem("11.00");
            EtimeCb.addItem("11.30");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("10.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("11.00");
            EtimeCb.addItem("11.30");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("11.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("11.30");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("11.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("12.00");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("12.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("12.30");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");   
            
         }else if(StimeCb.getSelectedItem().equals("12.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("13.00");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("13.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("13.30");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("13.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("14.00");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("14.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("14.30");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("14.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("15.00");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("15.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("15.30");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("15.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("16.00");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("16.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("16.30");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30"); 
            
         }else if(StimeCb.getSelectedItem().equals("16.30")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("17.00");
            EtimeCb.addItem("17.30");  
            
         }else if(StimeCb.getSelectedItem().equals("17.00")){
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
            EtimeCb.addItem("17.30");   
            
         }else{
             
            EtimeCb.removeAllItems();
            EtimeCb.addItem("Select");
         
         }
    
      }
    
//---------------------------------------------------- Thilina Tissera ------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------
 // Consecutive Function 

    public void viewDetails_con()
    {
        DefaultTableModel dtm = (DefaultTableModel) Table_cons.getModel();
        dtm.setRowCount(0);
      
        
        try {
              
               // ResultSet rs = DataBase.getData("SELECT SessionId,l1name,l2name,subname,subname,groupname,tagname FROM session ORDER BY groupname asc");
               ResultSet rs = DataBase.getData("SELECT SessionID, l1name,l2name,subCode,subname,tagname, groupname  FROM session WHERE tagname = 'tute' or tagname = 'lecture' ORDER BY groupname asc, subname");
               
              // dtm.addColumn("Select");
      while (rs.next())
                {

                    Vector v = new Vector();
  
                    v.add(rs.getString(1));
                    v.add(rs.getString(2));  
                    v.add(rs.getString(3));  
                    v.add(rs.getString(4));
                    v.add(rs.getString(5));
                    v.add(rs.getString(6));  
                    v.add(rs.getString(7));  

                    
                    dtm.addRow(v);

                }

            } catch (Exception e) 
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e);
            }
        
    }
    
     public void viewDetails_para()
    {
        DefaultTableModel dtm = (DefaultTableModel) Table_para.getModel();
        dtm.setRowCount(0);
      
        
        try {
              
               // ResultSet rs = DataBase.getData("SELECT SessionId,l1name,l2name,subname,subname,groupname,tagname FROM session ORDER BY groupname asc");
               ResultSet rs = DataBase.getData("SELECT SessionID, l1name,l2name,subCode,subname,tagname, groupname  FROM session WHERE tagname = 'lecture' ORDER BY groupname asc, subname");
               
              // dtm.addColumn("Select");
      while (rs.next())
                {

                    Vector v = new Vector();
  
                    v.add(rs.getString(1));
                    v.add(rs.getString(2));  
                    v.add(rs.getString(3));  
                    v.add(rs.getString(4));
                    v.add(rs.getString(5));
                    v.add(rs.getString(6));  
                    v.add(rs.getString(7));  

                    
                    dtm.addRow(v);

                }

            } catch (Exception e) 
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e);
            }
    }
     
      public void viewDetails_non()
    {
        DefaultTableModel dtm = (DefaultTableModel) Table_nonover.getModel();
        dtm.setRowCount(0);
      
        
        try {
              
               // ResultSet rs = DataBase.getData("SELECT SessionId,l1name,l2name,subname,subname,groupname,tagname FROM session ORDER BY groupname asc");
               ResultSet rs = DataBase.getData("SELECT SessionID, l1name,l2name,subCode,subname,tagname, groupname  FROM session WHERE tagname = 'tute' or tagname = 'lecture' ORDER BY groupname asc, subname");
               
              // dtm.addColumn("Select");
      while (rs.next())
                {

                    Vector v = new Vector();
  
                    v.add(rs.getString(1));
                    v.add(rs.getString(2));  
                    v.add(rs.getString(3));  
                    v.add(rs.getString(4));
                    v.add(rs.getString(5));
                    v.add(rs.getString(6));  
                    v.add(rs.getString(7));  

                    
                    dtm.addRow(v);

                }

            } catch (Exception e) 
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e);
            }
    }
    
//---------------------------------------------------------------------------------------------------------------------------------    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DateCB;
    private javax.swing.JComboBox<String> EtimeCb;
    private javax.swing.JComboBox<String> GrpCB;
    private javax.swing.JComboBox<String> LecCB;
    private javax.swing.JPanel NotAvailable_tab;
    private javax.swing.JTabbedPane Session_tab;
    private javax.swing.JComboBox<String> SsIDCB;
    private javax.swing.JComboBox<String> StimeCb;
    private javax.swing.JComboBox<String> SubGrpCB;
    private javax.swing.JTable Table_cons;
    private javax.swing.JTable Table_nonover;
    private javax.swing.JTable Table_para;
    private javax.swing.JButton btn_cons_Add;
    private javax.swing.JButton btn_cons_view;
    private javax.swing.JButton btn_nonOver_Add;
    private javax.swing.JButton btn_nonOver_view;
    private javax.swing.JButton btn_notAvailable_Add;
    private javax.swing.JButton btn_notAvailable_clear;
    private javax.swing.JButton btn_notAvailable_view;
    private javax.swing.JButton btn_para_Add;
    private javax.swing.JButton btn_para_view;
    private javax.swing.JPanel consecutive_tab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel nonOverLap_tab;
    private javax.swing.JPanel parallel_tab;
    // End of variables declaration//GEN-END:variables
}
