package timetablemanagement;

import java.sql.ResultSet;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SANDEEP
 */
public class locaManage extends javax.swing.JInternalFrame {
    
    DefaultTableModel model;
    /**
     * Creates new form locaManage
     */
    public locaManage() {
        initComponents();
        LoadTable();
        
        this.setBorder(null);
        BasicInternalFrameUI bui = (BasicInternalFrameUI)this.getUI();
        bui.setNorthPane(null);
        model = (DefaultTableModel) locationTable.getModel();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    String type = "";
    String RoomID = "";
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        locationTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        buildingCB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        roomTF = new javax.swing.JTextField();
        capacityTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lecRadio = new javax.swing.JRadioButton();
        labRadio = new javax.swing.JRadioButton();
        submitButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        locationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Building", "Room", "Room Type", "Capacity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        locationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locationTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(locationTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
        );

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Location Management");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addGap(585, 585, 585))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addGap(9, 9, 9))
        );

        buildingCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Building", "Main Building", "New Building" }));
        buildingCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingCBActionPerformed(evt);
            }
        });

        jLabel2.setText("Room Name");

        roomTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTFActionPerformed(evt);
            }
        });

        capacityTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacityTFActionPerformed(evt);
            }
        });

        jLabel3.setText("Capacity");

        buttonGroup1.add(lecRadio);
        lecRadio.setText("Lecture Hall");
        lecRadio.setActionCommand("Lecture");
        lecRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lecRadioActionPerformed(evt);
            }
        });

        buttonGroup1.add(labRadio);
        labRadio.setText("Laboratory");
        labRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labRadioActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(137, 137, 137)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomTF, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capacityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildingCB, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lecRadio)
                        .addGap(136, 136, 136)
                        .addComponent(labRadio)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(223, 223, 223)
                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(271, 271, 271)
                .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(buildingCB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomTF, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(capacityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lecRadio)
                            .addComponent(labRadio))
                        .addGap(40, 40, 40))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(421, 421, 421))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void locationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationTableMouseClicked
        String capa;
       
        buildingCB.setSelectedItem(locationTable.getValueAt(locationTable.getSelectedRow(), 0).toString());
        RoomID = (locationTable.getValueAt(locationTable.getSelectedRow(), 1).toString());
        roomTF.setText(locationTable.getValueAt(locationTable.getSelectedRow(), 1).toString());
        
        lecRadio.setSelected("Lecture".equalsIgnoreCase(locationTable.getValueAt(locationTable.getSelectedRow(), 2).toString())?true:false);
        labRadio.setSelected("Lab".equalsIgnoreCase(locationTable.getValueAt(locationTable.getSelectedRow(), 2).toString())?true:false);
        
        if(!("Lecture".equalsIgnoreCase(locationTable.getValueAt(locationTable.getSelectedRow(), 2).toString()))&& 
                !("Lab".equalsIgnoreCase(locationTable.getValueAt(locationTable.getSelectedRow(), 2).toString()))){
            buttonGroup1.clearSelection();
        }
        
        capacityTF.setText(locationTable.getValueAt(locationTable.getSelectedRow(), 3).toString());
        capa = (locationTable.getValueAt(locationTable.getSelectedRow(), 3).toString());
        
        int capacity = Integer.parseInt(capa);
        
      
        
        
        
            
    }//GEN-LAST:event_locationTableMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        String bulding =buildingCB.getSelectedItem().toString();
        String room = roomTF.getText().toString();
        String capa = capacityTF.getText();
        String id = ""; 

        
        if(lecRadio.isSelected()){
        
            type = "Lecture";
        }else if(labRadio.isSelected()){
        
            type = "Lab";
        }
        
        DefaultTableModel dtm = (DefaultTableModel) locationTable.getModel();
        int row = locationTable.getSelectedRow();

        if (row != -1) 
        {
            if(bulding == "Select Building")
            {
                JOptionPane.showMessageDialog(null, "Select The Building");
            }
            else
            {
                int confirm = JOptionPane.showConfirmDialog(null, "Do you want to Update?", "Update", JOptionPane.YES_NO_OPTION); 
                if (confirm == 0) 
                {
                    try
                    {
                        ResultSet rs = DataBase.getData("SELECT id FROM location");
          
          
           
                        while(rs.next()){
                                id = rs.getString("id");
                        }
                
                        if(validateFields()){
                        
                            DataBase.setData("UPDATE location set BuildingName = '"+bulding+"', roomName = '"+room+"',RoomType = '"+type+"',capacity = '"+capa+"' where id = '"+id+"' ");
                            JOptionPane.showMessageDialog(null, " Successfully Updated");
                      
                         Refresh();
                        }
                    
                    }
                    catch (Exception e)
                    {
                              JOptionPane.showMessageDialog(null, "Failed" + e);
                    }
               
                  LoadTable();
                }
            }
            
        }
        
        
        else 
        {
                JOptionPane.showMessageDialog(null, "Please Select a row for Update");
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
         
        DefaultTableModel dtm = (DefaultTableModel) locationTable.getModel();
        int row = locationTable.getSelectedRow();
 
        if (row != -1) 
        {
        
            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to delete?", "Delete", JOptionPane.YES_NO_OPTION); 
            if (confirm == 0) 
            {
                try
                {
                   
                  DataBase.setData("DELETE FROM location WHERE RoomName = '"+RoomID+"'");
                  JOptionPane.showMessageDialog(null, "Successfully Deleted");

                }
                catch (Exception e)
                {
                          JOptionPane.showMessageDialog(null, "Failed" + e);
                }
              Refresh();
              LoadTable();
            }
        }
        else
        {
             JOptionPane.showMessageDialog(null, "Please Select a Row for Delete");
        }
    
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearFileds();
        Refresh();
        LoadTable();       
    }//GEN-LAST:event_clearButtonActionPerformed

    private void buildingCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buildingCBActionPerformed

    private void roomTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomTFActionPerformed

    private void capacityTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacityTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_capacityTFActionPerformed

    private void lecRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lecRadioActionPerformed

        type = "Lecture";
    }//GEN-LAST:event_lecRadioActionPerformed

    private void labRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labRadioActionPerformed

        type = "Lab";
    }//GEN-LAST:event_labRadioActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed

        model.insertRow(model.getRowCount(), new Object[] {buildingCB.getSelectedItem(), roomTF.getText(),buttonGroup1.getSelection().getActionCommand(), capacityTF.getText()});
        
        
        String building =buildingCB.getSelectedItem().toString();
        String room = roomTF.getText();
        String capacity = capacityTF.getText();
        String roomType = type;

          
        
       if(building == "Select Building")
       {
                JOptionPane.showMessageDialog(null, "Please Select The Building");
                
         }
       else
       {
           if(validateFields()){
            try
            {
                DataBase.setData("insert into location(BuildingName,roomName,roomType,capacity) values('"+building+"','"+room+"','"+roomType+"','"+capacity+"')");
                JOptionPane.showMessageDialog(null, "Location Added Successfully");
                
                 Refresh();
                 type = "";

            }
            catch (Exception e)
            {
                        JOptionPane.showMessageDialog(null, "Failed To Add Location" + e);
            }
           }
            
            LoadTable();
           
       }
        
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> buildingCB;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField capacityTF;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton labRadio;
    private javax.swing.JRadioButton lecRadio;
    private javax.swing.JTable locationTable;
    private javax.swing.JTextField roomTF;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
    
    private void clearFileds() {
        capacityTF.setText("");
        roomTF.setText("");
        buildingCB.setSelectedIndex(0);
        buttonGroup1.clearSelection();
    }
    
    private String roomType;
    
    
    public void Refresh()
    {
        buildingCB.setSelectedItem("Select Building");
        capacityTF.setText("");
        buttonGroup1.clearSelection();
        roomTF.setText("");
        
    }
    
    
    public void LoadTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) locationTable.getModel();
        dtm.setRowCount(0);
        
        try{
              
                ResultSet rs = DataBase.getData("Select BuildingName,roomName,roomType,capacity  from location");
                
                while (rs.next())
                {

                    Vector v = new Vector();
                   
              
                    v.add(rs.getString(1));
                    v.add(rs.getString(2));  
                    v.add(rs.getString(3));  
                    v.add(rs.getString(4));
                    dtm.addRow(v);

                }

            } catch (Exception e) 
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e);
            }
           
    }
    
    
    public boolean validateFields(){
        
        String lBuild = buildingCB.getSelectedItem().toString();
        String lRoom = roomTF.getText();
        String lCapa = capacityTF.getText();
        
        int intCapa = Integer.parseInt(lCapa);

        if(type.isEmpty()){
            
            JOptionPane.showMessageDialog(null, "Enter THE ROOM TYPE ");
            return false;       
        }
        
        if (roomTF.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, "Enter THE ROOM NAME ");
            return false;
            
        }
        
        if (capacityTF.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, "ENTER CAPACITY");
            return false;
            
        }     
           
        return true;
    }
}
